{"version":3,"sources":["components/star.js","pages/FrontPage.js","App.js","serviceWorker.js","index.js"],"names":["Star","props","react_default","a","createElement","className","style","width","concat","Math","floor","random","height","position","top","left","borderRadius","animationDuration","animationDelay","FrontPage","stars","Array","apply","length","map","Number","call","star","key","color","textAlign","fontSize","fontWeight","React","Component","App","pages_FrontPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAEO,SAASA,EAAKC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAC3BC,MAAK,GAAAC,OAAKC,KAAKC,MAAM,EAAAD,KAAKE,UAAsB,EAA3C,MACLC,OAAM,GAAAJ,OAAKC,KAAKC,MAAM,EAAAD,KAAKE,UAAsB,EAA3C,MACNE,SAAU,WACVC,IAAG,GAAAN,OAAKC,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EAA7C,KACHI,KAAI,GAAAP,OAAKC,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EAA7C,KACJK,aAAY,MACZC,kBAAiB,GAAAT,OAAKC,KAAKC,MAAM,EAAAD,KAAKE,UAAsB,EAA3C,KACjBO,eAAc,GAAAV,OAAKC,KAAKC,MAAM,EAAAD,KAAKE,UAAuB,EAA5C,YCiBLQ,mLAvBX,IAAIC,EAAQC,MAAMC,MAAM,KAAM,CAACC,OAAQ,MAAMC,IAAIC,OAAOC,KAAMD,QAC9D,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZe,EAAMI,IAAI,SAAAG,GAAI,OAAKzB,EAAAC,EAAAC,cAACJ,EAAD,CAAM4B,IAAKD,MAC/BzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MACEE,MAAO,CACLuB,MAAO,QACPC,UAAW,SACXjB,SAAU,WACVC,IAAK,MACLiB,SAAU,GACVC,WAAY,QAPhB,sDARcC,IAAMC,WCMfC,MANf,WACE,OACEjC,EAAAC,EAAAC,cAACgC,EAAD,aCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba33b43d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function Star(props){\r\n  return (\r\n    <div className='star' style={{\r\n      width: `${Math.floor(Math.random() * (4 - 2)) + 2}px`,\r\n      height: `${Math.floor(Math.random() * (4 - 2)) + 2}px`,\r\n      position: 'absolute',\r\n      top: `${Math.floor(Math.random() * (100 - 0)) + 0}%`,\r\n      left: `${Math.floor(Math.random() * (100 - 0)) + 0}%`,\r\n      borderRadius: `50%`,\r\n      animationDuration: `${Math.floor(Math.random() * (5 - 2)) + 2}s`,\r\n      animationDelay: `${Math.floor(Math.random() * (10 - 1)) + 1}s`,\r\n    }}>\r\n\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport {Star} from '../components/star';\r\n\r\nclass FrontPage extends React.Component {\r\n  \r\n  render() {\r\n    let stars = Array.apply(null, {length: 100}).map(Number.call, Number)\r\n    return (\r\n      <div className=\"frontPage\">\r\n        {stars.map(star => (<Star key={star}/>))}\r\n        <div className='overlay'>   \r\n          <h1\r\n            style={{\r\n              color: \"white\",\r\n              textAlign: 'center',\r\n              position: 'relative',\r\n              top: '35%',\r\n              fontSize: 40,\r\n              fontWeight: '400'\r\n            }}\r\n          >\r\n            Hi! My name is Majiyd and i'm a developer\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FrontPage;","import React from 'react';\nimport FrontPage from './pages/FrontPage'\n\nfunction App() {\n  return (\n    <FrontPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/css/styles.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}